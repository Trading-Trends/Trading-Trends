version: '3.8'

services:
  postgres:
    image: postgres:15.8
    restart: always
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres_data:/var/lib/postgresql/data
    ports:
      - "25432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tradingtrends

  redis-master:
    image: 'bitnami/redis:latest'
    container_name: redis-master
    user: root
    command: redis-server --appendonly yes --protected-mode no
    environment:
      - REDIS_REPLICATION_MODE=master
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"
    networks:
      - redis_network
    volumes:
      - ./redis_data/master:/data

  redis-slave1:
    image: 'bitnami/redis:latest'
    container_name: redis-slave1
    user: root
    command: redis-server --replicaof redis-master 6379 --appendonly yes --protected-mode no
    environment:
      - REDIS_MASTER_HOST=redis-master
      - REDIS_REPLICATION_MODE=slave
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6380:6379"
    depends_on:
      - redis-master
    networks:
      - redis_network
    volumes:
      - ./redis_data/slave1:/data

  redis-slave2:
    image: 'bitnami/redis:latest'
    container_name: redis-slave2
    user: root
    command: redis-server --replicaof redis-master 6379 --appendonly yes --protected-mode no
    environment:
      - REDIS_MASTER_HOST=redis-master
      - REDIS_REPLICATION_MODE=slave
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6381:6379"
    depends_on:
      - redis-master
    networks:
      - redis_network
    volumes:
      - ./redis_data/slave2:/data

  redis-sentinel1:
    image: 'bitnami/redis-sentinel:latest'
    container_name: redis-sentinel1
    user: root
    volumes:
      - ./redis_sentinel:/etc/redis
    command: redis-sentinel /etc/redis/sentinel1.conf
    ports:
      - "26379:26379"
    depends_on:
      - redis-master
      - redis-slave1
      - redis-slave2
    networks:
      - redis_network

  redis-sentinel2:
    image: 'bitnami/redis-sentinel:latest'
    container_name: redis-sentinel2
    user: root
    volumes:
      - ./redis_sentinel:/etc/redis
    command: redis-sentinel /etc/redis/sentinel2.conf
    ports:
      - "26380:26379"
    depends_on:
      - redis-master
      - redis-slave1
      - redis-slave2
    networks:
      - redis_network

  redis-sentinel3:
    image: 'bitnami/redis-sentinel:latest'
    container_name: redis-sentinel3
    user: root
    volumes:
      - ./redis_sentinel:/etc/redis
    command: redis-sentinel /etc/redis/sentinel3.conf

    ports:
      - "26381:26379"
    depends_on:
      - redis-master
      - redis-slave1
      - redis-slave2
    networks:
      - redis_network

  redis-auth:
    image: 'redis:latest'  # Redis 이미지 사용
    hostname: redis
    command: redis-server --requirepass systempass --port 6379
    ports:
      - "26479:6379"  # 바인딩할 포트:내부 포트

  coin-zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: coin-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1

  coin-kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: coin-kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
#      - "9991:9999"  # JMX 포트 노출
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "coin-zookeeper:2181"
#      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
#      KAFKA_ADVERTISED_LISTENERS: INTERNAL://coin-kafka1:9092,EXTERNAL://coin-kafka1:29092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT

      KAFKA_ADVERTISED_LISTENERS: INTERNAL://coin-kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_JMX_PORT: 9999   # JMX 포트 설정
    depends_on:
      - coin-zookeeper

  coin-kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: coin-kafka2
    ports:
      - "9093:9093"
      - "29093:29093"
#      - "9992:9999"  # JMX 포트 노출
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "coin-zookeeper:2181"
#      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9093,EXTERNAL://0.0.0.0:29093
#      KAFKA_ADVERTISED_LISTENERS: INTERNAL://coin-kafka2:9093,EXTERNAL://coin-kafka2:29093
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://coin-kafka2:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_JMX_PORT: 9999   # JMX 포트 설정
    depends_on:
      - coin-zookeeper

  coin-kafka3:
    image: confluentinc/cp-kafka:latest
    container_name: coin-kafka3
    ports:
      - "9094:9094"
      - "29094:29094"
#      - "9993:9999"  # JMX 포트 노출
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "coin-zookeeper:2181"
#      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9094,EXTERNAL://0.0.0.0:29094
#      KAFKA_ADVERTISED_LISTENERS: INTERNAL://coin-kafka3:9094,EXTERNAL://coin-kafka3:29094
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://coin-kafka3:19094,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094,DOCKER://host.docker.internal:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_JMX_PORT: 9999   # JMX 포트 설정
    depends_on:
      - coin-zookeeper

  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: kafka-exporter
    depends_on:
      - coin-kafka1
      - coin-kafka2
      - coin-kafka3
    ports:
      - "9308:9308"  # Kafka Exporter가 Prometheus에 노출하는 메트릭 포트
    command: ["--kafka.server=coin-kafka1:9092", "--kafka.server=coin-kafka2:9093", "--kafka.server=coin-kafka3:9094"]

#  jmx-exporter:
#    image: solsson/kafka-prometheus-jmx-exporter:latest
#    container_name: jmx-exporter
#    ports:
#      - "8181:8080"  # JMX Exporter HTTP 엔드포인트 포트를 8181로 변경
#    volumes:
#      - ./jmx-exporter-config.yml:/opt/jmx-exporter-config.yml  # JMX Exporter 설정 파일을 마운트
#    depends_on:
#      - coin-kafka1
#      - coin-kafka2
#      - coin-kafka3

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: tt-kafdrop
    depends_on:
      - coin-kafka1
      - coin-kafka2
      - coin-kafka3
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKER_CONNECT: coin-kafka1:29092,coin-kafka2:29093,coin-kafka3:29094
      JVM_OPTS: "-Xms16M -Xmx512M -Xss1M -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"  # Prometheus UI 접근 포트
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml  # Prometheus 설정 파일 마운트
    depends_on:
      - coin-kafka1
      - coin-kafka2
      - coin-kafka3
#      - jmx-exporter
      - kafka-exporter

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"  # Grafana UI 접근 포트
    volumes:
      - ./grafana-storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - coin-kafka1
      - coin-kafka2
      - coin-kafka3
      - kafka-exporter
#      - jmx-exporter
      - prometheus

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: tt-zipkin
    ports:
      - "9411:9411"

networks:
  redis_network:
    driver: bridge
#    ipam:
#      config:
#        - subnet: 172.22.0.0/16 # master, slave, sentinel**이 모두 같은 네트워크로 묶여있다면, 굳이 정적 IP 주소를 할당하지 않아도 됩니다

